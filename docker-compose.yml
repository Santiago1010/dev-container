services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    restart: unless-stopped
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
      - ./config/kafka:/etc/kafka/config
    restart: unless-stopped
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: redis
    depends_on:
      consul:
        condition: service_healthy
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispass123}
    volumes:
      - ./data/redis:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka-network

  consul:
    image: hashicorp/consul:1.17
    container_name: consul
    ports:
      - "8500:8500"  # UI y API HTTP
      - "8600:8600/udp"  # DNS
      - "8600:8600/tcp"  # DNS
    volumes:
      - ./config/consul/consul.json:/consul/config/consul.json:ro
      - ./data/consul:/consul/data
    command: "agent -config-file=/consul/config/consul.json"
    restart: unless-stopped
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: postgres-n8n
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-n8n}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-n8npassword}
      POSTGRES_DB: ${POSTGRES_DB:-n8n}
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-n8n}"]
      interval: 10s
      timeout: 5s
      retries: 5

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "5678:5678"
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-n8n}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-n8n}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-n8npassword}

      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD:-redispass123}
      EXECUTIONS_MODE: queue

      N8N_PROTOCOL: http
      N8N_HOST: localhost
      N8N_PORT: 5678
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:-n8n-encryption-key-change-this}

      GENERIC_TIMEZONE: America/Bogota
      TZ: America/Bogota

      WORKFLOWS_DEFAULT_NAME: "Mi Workflow"
      N8N_METRICS: "false"
    volumes:
      - ./data/n8n:/home/node/.n8n
    restart: unless-stopped
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: jaeger
    depends_on:
      consul:
        condition: service_healthy
    ports:
      - "5775:5775/udp"   # Agent: accept zipkin.thrift over compact thrift protocol (deprecated)
      - "6831:6831/udp"   # Agent: accept jaeger.thrift over compact thrift protocol
      - "6832:6832/udp"   # Agent: accept jaeger.thrift over binary thrift protocol
      - "5778:5778"       # Agent: serve configs
      - "16686:16686"     # Query: serve frontend
      - "14250:14250"     # Collector: accept model.proto
      - "14268:14268"     # Collector: accept jaeger.thrift directly from clients
      - "14269:14269"     # Admin port: health check at /
      - "9411:9411"       # Collector: Zipkin compatible endpoint
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: ":9411"
      COLLECTOR_OTLP_ENABLED: "true"
    restart: unless-stopped
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:14269/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  vault:
    image: hashicorp/vault:1.15
    container_name: vault
    depends_on:
      consul:
        condition: service_healthy
    ports:
      - "8200:8200"  # API de Vault
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
      VAULT_API_ADDR: "http://0.0.0.0:8200"
      VAULT_LOCAL_CONFIG: |
        {
          "backend": {
            "consul": {
              "address": "consul:8500",
              "path": "vault/"
            }
          },
          "listener": {
            "tcp": {
              "address": "0.0.0.0:8200",
              "tls_disable": 1
            }
          },
          "ui": true,
          "log_level": "info",
          "disable_mlock": true
        }
    cap_add:
      - IPC_LOCK
    volumes:
      - ./data/vault/logs:/vault/logs
      - ./data/vault/file:/vault/file
    command: server
    restart: unless-stopped
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8200/v1/sys/health?standbyok=true&sealedcode=200&uninitcode=200"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    depends_on:
      consul:
        condition: service_healthy
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./data/prometheus:/prometheus
    restart: unless-stopped
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    depends_on:
      prometheus:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: ""
      GF_SERVER_ROOT_URL: http://localhost:3000
      GF_AUTH_ANONYMOUS_ENABLED: "false"
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
    restart: unless-stopped
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ====== NUEVOS SERVICIOS ======

  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: minio
    depends_on:
      consul:
        condition: service_healthy
    ports:
      - "9000:9000"      # API de MinIO
      - "9001:9001"      # Consola Web de MinIO
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
      MINIO_PROMETHEUS_AUTH_TYPE: public
    command: server /data --console-address ":9001"
    volumes:
      - ./data/minio:/data
    restart: unless-stopped
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres-kong:
    image: postgres:15-alpine
    container_name: postgres-kong
    environment:
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kongpassword}
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
    ports:
      - "5433:5432"  # Puerto diferente para evitar conflicto con postgres-n8n
    volumes:
      - ./data/postgres-kong:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KONG_PG_USER:-kong}"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration:
    image: kong/kong-gateway:3.5
    container_name: kong-migration
    depends_on:
      postgres-kong:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres-kong
      KONG_PG_PORT: 5432
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kongpassword}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
    command: kong migrations bootstrap
    restart: on-failure
    networks:
      - kafka-network

  kong:
    image: kong/kong-gateway:3.5
    container_name: kong
    depends_on:
      postgres-kong:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
      consul:
        condition: service_healthy
    ports:
      - "8000:8000"      # Proxy HTTP (API Gateway)
      - "8443:8443"      # Proxy HTTPS (API Gateway)
      - "8001:8001"      # Admin API HTTP
      - "8444:8444"      # Admin API HTTPS
      - "8002:8002"      # Kong Manager (UI)
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres-kong
      KONG_PG_PORT: 5432
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kongpassword}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_ADMIN_GUI_URL: http://localhost:8002
      
      # Deshabilitar autenticación de Admin API para desarrollo local
      KONG_ADMIN_GUI_AUTH: "off"
      KONG_ENFORCE_RBAC: "off"
    restart: unless-stopped
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  zookeeper-data:
  zookeeper-log:
  kafka-data:

networks:
  kafka-network:
    driver: bridge